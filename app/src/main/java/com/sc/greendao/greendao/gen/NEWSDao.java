package com.sc.greendao.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sc.entity.NEWS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NEWSDao extends AbstractDao<NEWS, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity NEWS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Patch = new Property(1, String.class, "patch", false, "PATCH");
        public final static Property Asset = new Property(2, String.class, "asset", false, "ASSET");
        public final static Property Plant = new Property(3, String.class, "plant", false, "PLANT");
        public final static Property Process = new Property(4, String.class, "process", false, "PROCESS");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Sender = new Property(7, String.class, "sender", false, "SENDER");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
    };


    public NEWSDao(DaoConfig config) {
        super(config);
    }
    
    public NEWSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATCH\" TEXT," + // 1: patch
                "\"ASSET\" TEXT," + // 2: asset
                "\"PLANT\" TEXT," + // 3: plant
                "\"PROCESS\" TEXT," + // 4: process
                "\"USERNAME\" TEXT," + // 5: username
                "\"CONTENT\" TEXT," + // 6: content
                "\"SENDER\" TEXT," + // 7: sender
                "\"DATE\" TEXT);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NEWS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String patch = entity.getPatch();
        if (patch != null) {
            stmt.bindString(2, patch);
        }
 
        String asset = entity.getAsset();
        if (asset != null) {
            stmt.bindString(3, asset);
        }
 
        String plant = entity.getPlant();
        if (plant != null) {
            stmt.bindString(4, plant);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(5, process);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(8, sender);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NEWS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String patch = entity.getPatch();
        if (patch != null) {
            stmt.bindString(2, patch);
        }
 
        String asset = entity.getAsset();
        if (asset != null) {
            stmt.bindString(3, asset);
        }
 
        String plant = entity.getPlant();
        if (plant != null) {
            stmt.bindString(4, plant);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(5, process);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(8, sender);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NEWS readEntity(Cursor cursor, int offset) {
        NEWS entity = new NEWS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // patch
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // asset
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // plant
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // process
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NEWS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatch(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAsset(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlant(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProcess(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NEWS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NEWS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
