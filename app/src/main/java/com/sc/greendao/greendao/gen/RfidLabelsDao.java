package com.sc.greendao.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sc.entity.RfidLabels;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RFID_LABELS".
*/
public class RfidLabelsDao extends AbstractDao<RfidLabels, Long> {

    public static final String TABLENAME = "RFID_LABELS";

    /**
     * Properties of entity RfidLabels.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phynum = new Property(1, String.class, "phynum", false, "PHYNUM");
        public final static Property Rfidid = new Property(2, String.class, "rfidid", false, "RFIDID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
    };


    public RfidLabelsDao(DaoConfig config) {
        super(config);
    }
    
    public RfidLabelsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RFID_LABELS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHYNUM\" TEXT," + // 1: phynum
                "\"RFIDID\" TEXT," + // 2: rfidid
                "\"TYPE\" TEXT," + // 3: type
                "\"DATE\" TEXT);"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RFID_LABELS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RfidLabels entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phynum = entity.getPhynum();
        if (phynum != null) {
            stmt.bindString(2, phynum);
        }
 
        String rfidid = entity.getRfidid();
        if (rfidid != null) {
            stmt.bindString(3, rfidid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RfidLabels entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phynum = entity.getPhynum();
        if (phynum != null) {
            stmt.bindString(2, phynum);
        }
 
        String rfidid = entity.getRfidid();
        if (rfidid != null) {
            stmt.bindString(3, rfidid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RfidLabels readEntity(Cursor cursor, int offset) {
        RfidLabels entity = new RfidLabels( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phynum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rfidid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RfidLabels entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhynum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRfidid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RfidLabels entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RfidLabels entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
